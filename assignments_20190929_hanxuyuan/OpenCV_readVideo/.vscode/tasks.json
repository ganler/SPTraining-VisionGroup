//{
//    // See https://go.microsoft.com/fwlink/?LinkId=733558
//   // for the documentation about the tasks.json format
//    "version": "2.0.0",
//    "tasks": [
//        {
//            "label": "echo",
//            "type": "shell",
//            "command": "echo Hello"
//        }
//    ]
//}

{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "label": "g++", // 任务名称，与launch.json的preLaunchTask相对应
            "command": "g++", // 要使用的编译器, C++就写g++
            "args": [
                "${file}",
                "-o", // 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out
                "${fileDirname}/${fileBasenameNoExtension}.out",
                "-g", // 生成和调试有关的信息
                //"-Wall", // 开启额外警告
                // "-static-libgcc", // 静态链接
                "-std=c++17" // C语言最新标准为c11，或根据自己的需要进行修改比如C++17
            ], // 编译命令参数
            "type": "shell", // 可以为shell或process，前者相当于先打开shell再输入命令，后者是直接运行命令
            "group": {
                "kind": "build",
                "isDefault": true // 设为false可做到一个tasks.json配置多个编译指令，需要自己修改本文件，我这里不多提
            },
            "presentation": {
                "echo": true, 
                "reveal": "always", // 在“终端”中显示编译信息的策略，可以为always，silent，never。具体参见VSC的文档
                "focus": true, // 设为true后可以使执行task时焦点聚集在终端
                "panel": "shared" // 不同的文件的编译信息共享一个终端面板
            },
            "problemMatcher": "$gcc"
        }
    ]
}

